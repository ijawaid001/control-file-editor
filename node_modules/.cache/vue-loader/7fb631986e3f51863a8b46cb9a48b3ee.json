{"remainingRequest":"C:\\Users\\ijawaid001\\Documents\\Front End for Ai Control Files\\control-file-editor\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ijawaid001\\Documents\\Front End for Ai Control Files\\control-file-editor\\src\\components\\ControlPipelines.vue?vue&type=style&index=0&id=25506b64&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\ijawaid001\\Documents\\Front End for Ai Control Files\\control-file-editor\\src\\components\\ControlPipelines.vue","mtime":1619172144935},{"path":"C:\\Users\\ijawaid001\\Documents\\Front End for Ai Control Files\\control-file-editor\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ijawaid001\\Documents\\Front End for Ai Control Files\\control-file-editor\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\ijawaid001\\Documents\\Front End for Ai Control Files\\control-file-editor\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\ijawaid001\\Documents\\Front End for Ai Control Files\\control-file-editor\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ijawaid001\\Documents\\Front End for Ai Control Files\\control-file-editor\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoudi1idG4gewogICAgbWFyZ2luOiAyZW0gMWVtOwp9CgouaGlkZSB7CiAgICBkaXNwbGF5OiBub25lIWltcG9ydGFudDsKfQoKLmRlbGV0ZUljb24gewogICAgbWFyZ2luLWxlZnQ6IDFlbTsKICAgIG1hcmdpbi10b3A6MTZweDsKICAgIGZvbnQtc2l6ZTogMzBweCFpbXBvcnRhbnQ7Cn0KCi5jb250YWluZXIgewogICAgbWFyZ2luLXRvcDogNjRweCFpbXBvcnRhbnQ7Cn0K"},{"version":3,"sources":["ControlPipelines.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuTA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"ControlPipelines.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <v-container>\r\n        <v-row>\r\n            <v-btn elevation=\"2\" @click=\"uploadFile()\">Import File</v-btn>\r\n            <v-spacer></v-spacer>\r\n            <v-btn elevation=\"2\" @click=\"resetFile()\">Reset File</v-btn>\r\n        </v-row>\r\n        <v-file-input \r\n        v-model=\"myFile\"\r\n        prepend-icon=\"\"\r\n        accept=\".json\"\r\n        class=\"hide\"\r\n        id=\"inputFile\"\r\n        @change=\"readFile\"\r\n        ></v-file-input>\r\n\r\n        <v-card>\r\n            <v-card-title>\r\n                {{fileName}}\r\n                <v-spacer></v-spacer>\r\n                <v-text-field\r\n                    v-model=\"search\"\r\n                    append-icon=\"mdi-magnify\"\r\n                    label=\"Search\"\r\n                    single-line\r\n                    hide-details\r\n                    class=\"searchInput\"\r\n                ></v-text-field>\r\n                <v-icon class=\"deleteIcon\" :disabled=\"disableDelete\" @click=\"deleteSelected\">mdi-delete</v-icon>\r\n            </v-card-title>\r\n            <v-data-table\r\n                v-model=\"selected\"\r\n                show-select\r\n                :headers = \"headers\"\r\n                :items = \"items\"\r\n                :search=\"search\"\r\n                v-bind:items-per-page= \"itemsPerPage\"\r\n                v-bind:page= \"page\"\r\n                class=\"elevation-1\"\r\n                id=\"table\"\r\n                :key=\"reRender\"\r\n                @pagination=\"paginate\"\r\n            >\r\n                <template v-slot:body=\"{ items }\">\r\n                    <tbody>\r\n                        <tr v-for=\"item in items\" :key=\"item.PortcoID\">\r\n                            <td><v-checkbox :value=\"item.PortcoID\" v-model=\"selected\"></v-checkbox></td>\r\n                            <td @click=\"clicked(item, 'PortcoID', false)\">{{ item.PortcoID }}</td>\r\n                            <td @click=\"clicked(item, 'SFTPDirectory', false)\">{{ item.SFTPDirectory }}</td>\r\n                            <td @click=\"clicked(item, 'PortcoPipeline', false)\">{{ displayList(item.PortcoPipeline, 'PortcoPipeline') }}</td>\r\n                            <td @click=\"clicked(item, 'PreStoredProcedures', false)\">{{ displayList(item.PreStoredProcedures, 'PreStoredProcedures') }}</td>\r\n                            <td @click=\"clicked(item, 'PostStoredProcedures', false)\">{{ displayList(item.PostStoredProcedures, 'PostStoredProcedures') }}</td>\r\n                            <td @click=\"clicked(item, 'ExpectedFiles', false)\">{{ displayList(item.ExpectedFiles, 'ExpectedFiles') }}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </template>\r\n                \r\n            </v-data-table>\r\n        </v-card>\r\n\r\n        <v-row>\r\n            <v-btn elevation=\"2\" @click=\"newRecord\">Create New Record</v-btn>\r\n            <v-spacer></v-spacer>\r\n            <v-btn v-if=\"!(!!expectedFiles.length)\" elevation=\"2\" @click=\"writeFile\">Save as new file</v-btn>\r\n        </v-row>\r\n\r\n\r\n        <v-dialog v-model=\"dialog\" width=\"500\" v-bind:persistent=\"persistentDialog\">\r\n            <v-card>\r\n                <v-card-title>\r\n                    Edit {{this.editAttribute}}\r\n                </v-card-title>\r\n                <v-card-text>\r\n                    <v-form ref=\"form\">\r\n                        <v-textarea v-if=\"showBigInput\"\r\n                        v-model=\"editedItem[editAttribute]\"\r\n                        auto-grow\r\n                        autofocus\r\n                        rows=\"1\"\r\n                        ></v-textarea>\r\n                        <v-text-field v-else v-model=\"editedItem[editAttribute]\"\r\n                        :rules=\"rules\"\r\n                        hide-details=\"auto\"\r\n                        ></v-text-field>\r\n                    </v-form>\r\n                </v-card-text>\r\n                <v-card-actions>\r\n                    <v-btn\r\n                        color=\"primary\"\r\n                        text\r\n                        @click=\"resetAttribute\"\r\n                    >\r\n                        Reset\r\n                    </v-btn>\r\n                    <v-spacer></v-spacer>\r\n                    <v-btn\r\n                        color=\"primary\"\r\n                        text\r\n                        @click=\"saveAttribute\"\r\n                    >\r\n                        Save\r\n                    </v-btn>\r\n                    </v-card-actions>\r\n            </v-card>\r\n        </v-dialog>\r\n        <expected-files v-if=\"!!expectedFiles.length\" :items=\"expectedFiles\"></expected-files>\r\n    </v-container>\r\n\r\n    \r\n    \r\n</template>\r\n\r\n<script>\r\nimport ExpectedFiles from './ExpectedFiles.vue'\r\n\r\nexport default {\r\n    name: 'ControlPipelines',\r\n    components: {\r\n        ExpectedFiles\r\n    },\r\n    data: () => ({\r\n        myFile: [],\r\n        fileName: '',\r\n        portcoIDs: [],\r\n        reRender: 0,\r\n        search: '',\r\n        rules: [],\r\n        selected: [],\r\n        dialog: false,\r\n        itemsPerPage: 10,\r\n        page: 1,\r\n        pageCount: 1,\r\n        itemToEdit: '',\r\n        editedItem: '',\r\n        editAttribute: '',\r\n        expectedFiles: [],\r\n        showBigInput: false,\r\n        persistentDialog: false,\r\n        headers: [\r\n            { text:'Portco ID', value: 'PortcoID'},\r\n            { text:'SFTP Directory', value: 'SFTPDirectory'},\r\n            { text:'Portco Pipeline', value: 'PortcoPipeline'},\r\n            { text:'Pre-stored Procedures', value: 'PreStoredProcedures'},\r\n            { text:'Post-stored Procedures', value: 'PostStoredProcedures'},\r\n            { text:'Expected Files', value: 'ExpectedFiles', width: '50%'}\r\n        ],\r\n        listHeaders: ['PortcoPipeline', 'PreStoredProcedures', 'PostStoredProcedures', 'ExpectedFiles'],\r\n        items: [],\r\n    }),\r\n    computed: {\r\n        disableDelete() {\r\n            if (this.selected.length > 0) {\r\n                return false\r\n            }\r\n            else {\r\n                return true\r\n            }\r\n        }\r\n    },\r\n    methods: {\r\n        readFile(file) {\r\n            this.asyncReadFile(file).then(result => {\r\n                this.fileName = file.name\r\n                var data = JSON.parse(result)\r\n                this.portcoIDs = data['Load']['Portcos']\r\n                this.items = []\r\n                this.myFile = []\r\n                for (var portcoID of this.portcoIDs) {\r\n                    this.items.push(data['Load'][portcoID])\r\n                    this.myFile.push(data['Load'][portcoID])\r\n                }\r\n                console.log(this.myFile)\r\n                this.forceRenderer()\r\n                this.page = 1 \r\n            })\r\n            \r\n        },\r\n        async asyncReadFile(file) {\r\n            let result = await new Promise((resolve) => {\r\n                let fileReader = new FileReader()\r\n                fileReader.onload = (e) => resolve(fileReader.result)\r\n                fileReader.readAsText(file)\r\n            })\r\n            return result\r\n        },\r\n        writeFile() {\r\n            var file = JSON.stringify(this.items, null, \"\\t\")\r\n            var fileSaver = require('file-saver')\r\n            var blob = new Blob([file], {type: \"application/json\"})\r\n            fileSaver.saveAs(blob, \"filelist.json\")\r\n        },\r\n        forceRenderer() {\r\n            this.reRender += 1\r\n        },\r\n        displayList(listToDisplay, attribute) {\r\n            if(attribute === 'ExpectedFiles') {\r\n                listToDisplay = \"Click here to edit\"\r\n            }\r\n            else {\r\n                if (listToDisplay.length = 1) {\r\n                    listToDisplay = listToDisplay.join(\",\")\r\n                }\r\n                else {\r\n                    listToDisplay = listToDisplay.join(\", \").slice(0,listToDisplay.join(\", \").indexOf(\" \", 40))\r\n                }\r\n            }\r\n            return listToDisplay\r\n        },\r\n        clicked(item, attribute, persistent) {\r\n            this.persistentDialog = persistent\r\n            this.itemToEdit = item\r\n            this.editedItem = Object.assign({}, this.itemToEdit)\r\n            this.editAttribute = attribute\r\n            if(this.editAttribute === 'ExpectedFiles') {\r\n                this.expectedFiles = this.itemToEdit['ExpectedFiles']\r\n                console.log(this.expectedFiles)\r\n                return\r\n            }\r\n            if (this.listHeaders.includes(this.editAttribute)) {\r\n                this.showBigInput = true\r\n                this.editedItem[this.editAttribute] = this.editedItem[this.editAttribute].join(\", \")\r\n            }\r\n            else {\r\n                this.showBigInput = false\r\n            }\r\n            this.rulesFunc()\r\n            this.dialog = true\r\n        },\r\n        saveAttribute() {\r\n            if (this.$refs.form.validate()) {\r\n                this.dialog = false\r\n                if (this.itemToEdit[this.editAttribute] != this.editedItem[this.editAttribute]) {\r\n                    if (this.listHeaders.includes(this.editAttribute)) {\r\n                        this.editedItem[this.editAttribute] = (this.editedItem[this.editAttribute]).split(\", \")\r\n                    }\r\n                }\r\n                for (var i of this.items) {\r\n                    if (i == this.itemToEdit) {\r\n                        this.items[this.items.indexOf(i)] = this.editedItem\r\n                    }\r\n                }\r\n                this.forceRenderer()\r\n            }\r\n        },\r\n        resetAttribute() {\r\n            this.editedItem[this.editAttribute] = this.itemToEdit[this.editAttribute]\r\n        },\r\n        newRecord() {\r\n            var newItem = {}\r\n            for (var header of this.headers) {\r\n                if (this.listHeaders.includes(header.value)) {\r\n                    newItem[header.value] = ['']\r\n                }\r\n                else {\r\n                    newItem[header.value] = ''\r\n                }\r\n            }\r\n            this.items.push(newItem)\r\n            this.forceRenderer()\r\n            if (Math.ceil(this.items.length / this.itemsPerPage) > this.pageCount) {\r\n                this.pageCount += 1\r\n            }\r\n            this.page = this.pageCount\r\n            this.clicked(newItem, 'PortcoID', true)\r\n        },\r\n        paginate(val) {\r\n            this.page = val.page\r\n            this.itemsPerPage = val.itemsPerPage\r\n            this.pageCount = val.pageCount\r\n        },\r\n        uploadFile() {\r\n            document.getElementById(\"inputFile\").click()\r\n        },\r\n        resetFile() {\r\n            this.items = JSON.parse(JSON.stringify(this.myFile))\r\n            this.forceRenderer()\r\n            this.page = 1\r\n        },\r\n        deleteSelected() {\r\n            var newItems = []\r\n            for (var item of this.items) {\r\n                if (!this.selected.includes(item.PortcoID)) {\r\n                    newItems.push(item)\r\n                }\r\n            }\r\n            this.items = newItems\r\n            this.selected = []\r\n        },\r\n        rulesFunc() {\r\n            if(this.editAttribute === \"PortcoID\") {\r\n                const rule1 = value => !!value || 'Required.'\r\n                this.rules.push(rule1)\r\n                var portcoIDs = []\r\n                for (var i of this.items) {\r\n                    portcoIDs.push(i['PortcoID'])\r\n                }\r\n                const rule2 = value => (this.itemToEdit['PortcoID'] == value) || (portcoIDs.indexOf(value) == -1) || 'Duplicate PortcoID'\r\n                this.rules.push(rule2)\r\n            }\r\n            else {\r\n                this.rules = []\r\n            }\r\n        },\r\n    },\r\n    mounted() {\r\n        \r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n    .v-btn {\r\n        margin: 2em 1em;\r\n    }\r\n\r\n    .hide {\r\n        display: none!important;\r\n    }\r\n\r\n    .deleteIcon {\r\n        margin-left: 1em;\r\n        margin-top:16px;\r\n        font-size: 30px!important;\r\n    }\r\n\r\n    .container {\r\n        margin-top: 64px!important;\r\n    }\r\n</style>\r\n"]}]}